// Generated by CoffeeScript 1.8.0
(function() {
  var SSH2Shell;

  SSH2Shell = (function() {
    SSH2Shell.prototype.sshObj = {};

    SSH2Shell.prototype.sessionText = "";

    SSH2Shell.prototype.response = "";

    SSH2Shell.prototype._data = "";

    SSH2Shell.prototype._buffer = "";

    SSH2Shell.prototype._command = "";

    SSH2Shell.prototype._pwSent = false;

    SSH2Shell.prototype._sudosu = false;

    SSH2Shell.prototype._exit = false;

    SSH2Shell.prototype._stream = {};

    SSH2Shell.prototype._processData = function() {
      this._data = this._data.replace(/[^\r\n\x20-\x7e]/g, "");
      this._data = this._data.replace(/(\[[0-9]?[0-9]m)/g, "");
      this._buffer += "" + this._data;
      if (this._pwSent === false && this._command.indexOf("sudo") !== -1) {
        return this._processPasswordPrompt();
      } else {
        return this._processCommandPrompt();
      }
    };

    SSH2Shell.prototype._processPasswordPrompt = function() {
      if (this._buffer.trim().match(/[:]$/)) {
        if (this._command.indexOf("sudo su") !== -1) {
          this._sudosu = true;
        }
        this._pwSent = true;
        return this._stream.write("" + this.sshObj.server.password + "\n");
      }
    };

    SSH2Shell.prototype._processCommandPrompt = function() {
      if (this._buffer.trim().match(/[#$]$/)) {
        this._processBuffer();
        return this._processNextCommand();
      }
    };

    SSH2Shell.prototype._processBuffer = function() {
      this.sessionText += "" + this._buffer;
      this.response = this._buffer;
      this.sshObj.onCommandComplete(this);
      if (this.sshObj.verbose && !this._exit) {
        this.sshObj.msg.send(this._buffer);
      }
      return this._buffer = "";
    };

    SSH2Shell.prototype._processNotifications = function() {
      var _results;
      _results = [];
      while (this._command && (this._command.match(/^`(.*)`$/) || this._command.match(/^msg\s/))) {
        if (this._command.match(/^`(.*)`$/)) {
          this.sessionText += ("" + this._command + "\n").replace(/`/g, "");
          if (this.sshObj.verbose) {
            this.sshObj.msg.send(this._command.replace(/`/g, ""));
          }
        } else if (this._command.match(/^msg\s/)) {
          if (!this.sshObj.verbose) {
            this.sshObj.msg.send(this._command.replace(/^msg\s/, ""));
          }
        }
        _results.push(this._command = this.sshObj.commands.shift());
      }
      return _results;
    };

    SSH2Shell.prototype._processNextCommand = function() {
      if (this.sshObj.commands.length > 0) {
        this._command = this.sshObj.commands.shift();
        this._processNotifications();
        if (this._command) {
          return this._stream.write("" + this._command + "\n");
        } else {
          return this._runExit();
        }
      } else {
        return this._runExit();
      }
    };

    SSH2Shell.prototype._runExit = function() {
      this._exit = true;
      this._command = "exit\n";
      if (this._sudosu && !this._exit) {
        return this._stream.write("exit\n");
      } else {
        return this._stream.end("exit\n");
      }
    };

    function SSH2Shell(sshObj) {
      this.sshObj = sshObj;
    }

    SSH2Shell.prototype.connect = function() {
      var e;
      if (this.sshObj.server && this.sshObj.commands) {
        try {
          this.connection = new this.sshObj.Connection();
          this.connection.on("connect", function() {
            return this.sshObj.msg.send(this.sshObj.connectedMessage);
          });
          this.connection.on("ready", function() {
            this.sshObj.msg.send(this.sshObj.readyMessage);
            return this.connection.shell(function(err, _stream) {
              this._stream = _stream;
              if (err) {
                this.sshObj.msg.send("" + err);
              }
              this._stream.on("error", function(error) {
                return this.sshObj.msg.send("Stream Error: " + error);
              });
              this._stream.stderr.on('data', function(data) {
                return this.sshObj.msg.send("Stream STDERR: " + data);
              });
              this._stream.on("readable", function() {
                var e, _results;
                try {
                  _results = [];
                  while ((this._data = this._stream.read())) {
                    _results.push(this._processData());
                  }
                  return _results;
                } catch (_error) {
                  e = _error;
                  return this.sshObj.msg.send("" + e + " " + e.stack);
                }
              });
              this._stream.on("end", function() {
                return this.sshObj.onEnd(this.sessionText);
              });
              this._stream.on("close", function(code, signal) {
                return this.connection.end();
              });
              this._command = this.sshObj.commands.shift();
              return this._stream.write("" + this._command + "\n");
            });
          });
          this.connection.on("error", function(err) {
            return this.sshObj.msg.send("Connection :: error :: " + err);
          });
          this.connection.on("close", function(had_error) {
            return this.sshObj.msg.send(this.sshObj.closedMessage);
          });
          if (this.sshObj.server.privateKey) {
            return this.connection.connect({
              host: this.sshObj.server.host,
              port: this.sshObj.server.port,
              username: this.sshObj.server.userName,
              privateKey: this.sshObj.server.privateKey
            });
          } else {
            return this.connection.connect({
              host: this.sshObj.server.host,
              port: this.sshObj.server.port,
              username: this.sshObj.server.userName,
              password: this.sshObj.server.password
            });
          }
        } catch (_error) {
          e = _error;
          return this.sshObj.msg.send("" + e + " " + e.stack);
        }
      } else {
        return this.sshObj.msg.send("SSH error: missing info: server: " + this.sshObj.server.host + ", commands: " + this.sshObj.commands.length);
      }
    };

    SSH2Shell.runShell = function(sshObj) {
      this.sshObj = sshObj;
      return connect();
    };

    return SSH2Shell;

  })();

  module.exports = SSH2Shell;

}).call(this);
